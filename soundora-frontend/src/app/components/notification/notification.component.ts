import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subscription } from 'rxjs';
import { NotificationService, Notification } from '../../services/notification.service';

// =================================
// COMPOSANT D'AFFICHAGE DES NOTIFICATIONS
// Composant responsable de l'affichage visuel de toutes les notifications
// Position : Fixed en haut √† droite de l'√©cran (toast-style)
// =================================

@Component({
  selector: 'app-notification',
  standalone: true,
  imports: [CommonModule],
  template: `
    <!-- 
      CONTENEUR PRINCIPAL DES NOTIFICATIONS
      Position fixe en haut √† droite, z-index √©lev√© pour √™tre au-dessus de tout
      Design responsive : s'adapte aux petits √©crans
    -->
    <div class="notification-container">
      
      <!-- 
        BOUCLE SUR TOUTES LES NOTIFICATIONS ACTIVES
        Chaque notification est affich√©e avec animation CSS
        *ngFor track par ID pour optimiser les performances Angular
      -->
      <div 
        *ngFor="let notification of notifications; trackBy: trackByNotificationId"
        class="notification notification-slide-in"
        [ngClass]="getNotificationClasses(notification)">
        
        <!-- 
          IC√îNE DE LA NOTIFICATION
          Ic√¥ne diff√©rente selon le type (success, error, warning, info)
          Couleur coh√©rente avec le type de notification
        -->
        <div class="notification-icon">
          <span [innerHTML]="getNotificationIcon(notification.type)"></span>
        </div>
        
        <!-- 
          CONTENU PRINCIPAL DE LA NOTIFICATION
          Titre en gras + message descriptif
        -->
        <div class="notification-content">
          <div class="notification-title">{{ notification.title }}</div>
          <div class="notification-message">{{ notification.message }}</div>
          
          <!-- 
            BOUTON D'ACTION OPTIONNEL
            S'affiche seulement si une action est d√©finie
            Exemple : "Voir le panier" apr√®s ajout produit
          -->
          <button 
            *ngIf="notification.action"
            class="notification-action"
            (click)="executeAction(notification)">
            {{ notification.action.label }}
          </button>
        </div>
        
        <!-- 
          BOUTON DE FERMETURE
          Permet √† l'utilisateur de fermer manuellement la notification
          Toujours visible m√™me avec fermeture automatique
        -->
        <button 
          class="notification-close"
          (click)="closeNotification(notification.id)"
          aria-label="Fermer la notification">
          √ó
        </button>
        
        <!-- 
          BARRE DE PROGRESSION (OPTIONNELLE)
          Indique visuellement le temps restant avant fermeture automatique
          S'affiche seulement si autoClose = true et duration d√©finie
        -->
        <div 
          *ngIf="notification.autoClose && notification.duration"
          class="notification-progress"
          [style.animation-duration]="notification.duration + 'ms'">
        </div>
      </div>
    </div>
  `,
  styleUrls: ['./notification.component.css']
})
export class NotificationComponent implements OnInit, OnDestroy {
  
  // =================================
  // PROPRI√âT√âS DU COMPOSANT
  // =================================
  
  // Liste des notifications √† afficher (mise √† jour r√©active)
  notifications: Notification[] = [];
  
  // Abonnement RxJS pour √©couter les changements de notifications
  // Subscription permet de se d√©sabonner proprement dans ngOnDestroy
  private subscription: Subscription = new Subscription();

  // =================================
  // INJECTION DE D√âPENDANCE
  // =================================
  constructor(private notificationService: NotificationService) {}

  // =================================
  // LIFECYCLE HOOKS ANGULAR
  // =================================

  /**
   * INITIALISATION DU COMPOSANT
   * S'abonne aux changements de notifications du service
   */
  ngOnInit(): void {
    // ABONNEMENT AUX NOTIFICATIONS
    // Chaque fois que le service √©met de nouvelles notifications,
    // cette fonction se d√©clenche et met √† jour l'affichage
    this.subscription.add(
      this.notificationService.notifications$.subscribe(
        (notifications: Notification[]) => {
          this.notifications = notifications;
          
          // LOG DE DEBUG : Suivi des changements
          console.log(`üîî Composant notification : ${notifications.length} notification(s) active(s)`);
        }
      )
    );
  }

  /**
   * NETTOYAGE √Ä LA DESTRUCTION DU COMPOSANT
   * √âvite les fuites m√©moire en se d√©sabonnant des Observables
   */
  ngOnDestroy(): void {
    this.subscription.unsubscribe();
    console.log('üîî Composant notification d√©truit et d√©sabonn√©');
  }

  // =================================
  // M√âTHODES D'AFFICHAGE ET INTERACTION
  // =================================

  /**
   * OPTIMISATION ANGULAR : Fonction de tracking pour *ngFor
   * Permet √† Angular de ne re-rendre que les notifications qui changent
   * @param index - Index dans la liste
   * @param item - Notification concern√©e
   * @returns identifiant unique pour le tracking
   */
  trackByNotificationId(index: number, item: Notification): string {
    return item.id;
  }

  /**
   * G√âN√âRATION DES CLASSES CSS SELON LE TYPE DE NOTIFICATION
   * Applique les couleurs et styles appropri√©s selon success/error/warning/info
   * 
   * @param notification - Notification √† styler
   * @returns object avec les classes CSS √† appliquer
   */
  getNotificationClasses(notification: Notification): { [key: string]: boolean } {
    return {
      'notification-success': notification.type === 'success',   // Classe verte
      'notification-error': notification.type === 'error',       // Classe rouge
      'notification-warning': notification.type === 'warning',   // Classe orange
      'notification-info': notification.type === 'info',         // Classe bleue
      'notification-with-action': !!notification.action          // Style sp√©cial si bouton action
    };
  }

  /**
   * S√âLECTION DE L'IC√îNE SELON LE TYPE DE NOTIFICATION
   * Retourne l'emoji ou l'ic√¥ne HTML appropri√©e
   * 
   * @param type - Type de notification (success/error/warning/info)
   * @returns string HTML de l'ic√¥ne √† afficher
   */
  getNotificationIcon(type: string): string {
    // DICTIONNAIRE DES IC√îNES PAR TYPE
    const icons = {
      success: '‚úÖ',   // Coche verte pour les succ√®s
      error: '‚ùå',     // Croix rouge pour les erreurs
      warning: '‚ö†Ô∏è',   // Triangle orange pour les avertissements
      info: '‚ÑπÔ∏è'       // i pour les informations
    };

    // RETOURNE L'IC√îNE CORRESPONDANTE OU UNE IC√îNE PAR D√âFAUT
    return icons[type as keyof typeof icons] || 'üì¢';
  }

  /**
   * FERMETURE MANUELLE D'UNE NOTIFICATION
   * Appel√©e lors du clic sur le bouton "X"
   * 
   * @param notificationId - ID de la notification √† fermer
   */
  closeNotification(notificationId: string): void {
    // D√âL√âGATION AU SERVICE pour maintenir la logique centralis√©e
    this.notificationService.remove(notificationId);
    
    // LOG DE L'ACTION UTILISATEUR
    console.log(`üîî Notification ${notificationId} ferm√©e par l'utilisateur`);
  }

  /**
   * EX√âCUTION D'UNE ACTION DE NOTIFICATION
   * Appel√©e lors du clic sur un bouton d'action (ex: "Voir le panier")
   * 
   * @param notification - Notification contenant l'action √† ex√©cuter
   */
  executeAction(notification: Notification): void {
    // V√âRIFICATION DE LA PR√âSENCE DE L'ACTION
    if (notification.action && notification.action.callback) {
      // EX√âCUTION DU CALLBACK d√©fini lors de la cr√©ation de la notification
      notification.action.callback();
      
      // LOG DE L'ACTION
      console.log(`üîî Action "${notification.action.label}" ex√©cut√©e pour notification ${notification.id}`);
      
      // FERMETURE AUTOMATIQUE apr√®s ex√©cution de l'action
      // L'utilisateur a agi, plus besoin d'afficher la notification
      this.closeNotification(notification.id);
    }
  }
}
