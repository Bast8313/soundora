import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';

// =================================
// INTERFACE DES NOTIFICATIONS
// D√©finit la structure d'une notification avec tous ses param√®tres
// =================================
export interface Notification {
  id: string;                    // Identifiant unique pour chaque notification
  type: 'success' | 'error' | 'warning' | 'info'; // Type de notification (d√©finit couleur/ic√¥ne)
  title: string;                 // Titre principal de la notification
  message: string;               // Message d√©taill√© √† afficher
  duration?: number;             // Dur√©e d'affichage en millisecondes (optionnel)
  autoClose?: boolean;           // Si true, la notification se ferme automatiquement
  action?: {                     // Action optionnelle (bouton dans la notification)
    label: string;               // Texte du bouton
    callback: () => void;        // Fonction √† ex√©cuter lors du clic
  };
}

// =================================
// SERVICE DE GESTION DES NOTIFICATIONS
// Service singleton pour g√©rer toutes les notifications de l'application
// Utilis√© pour : confirmations ajout panier, erreurs, messages de succ√®s, etc.
// =================================
@Injectable({
  providedIn: 'root'
})
export class NotificationService {
  
  // =================================
  // PROPRI√âT√âS PRIV√âES - GESTION D'√âTAT
  // =================================
  
  // Liste r√©active de toutes les notifications actives
  // BehaviorSubject = Observable qui garde la derni√®re valeur √©mise
  private notificationsSubject = new BehaviorSubject<Notification[]>([]);
  
  // Compteur pour g√©n√©rer des IDs uniques de notifications
  private idCounter = 0;
  
  // =================================
  // PROPRI√âT√âS PUBLIQUES - API DU SERVICE
  // =================================
  
  // Observable expos√© aux composants pour s'abonner aux notifications
  // Les composants peuvent √©couter les changements : service.notifications$.subscribe()
  public notifications$ = this.notificationsSubject.asObservable();

  constructor() {
    // LOG DE D√âMARRAGE : Confirme l'initialisation du service
    console.log('üîî NotificationService initialis√©');
  }

  // =================================
  // M√âTHODES PUBLIQUES - AFFICHAGE DES NOTIFICATIONS
  // =================================

  /**
   * M√âTHODE PRINCIPALE : Afficher une notification
   * @param notification - Configuration compl√®te de la notification
   * @returns string - ID de la notification cr√©√©e (pour suppression manuelle)
   * 
   * UTILISATION :
   * service.show({
   *   type: 'success',
   *   title: 'Produit ajout√©',
   *   message: 'Gibson Les Paul ajout√©e au panier'
   * });
   */
  show(notification: Omit<Notification, 'id'>): string {
    // G√âN√âRATION D'UN ID UNIQUE
    // Format: "notif_1", "notif_2", etc.
    const id = `notif_${++this.idCounter}`;
    
    // CR√âATION DE LA NOTIFICATION COMPL√àTE
    // Merge des param√®tres fournis + valeurs par d√©faut
    const fullNotification: Notification = {
      id,                           // ID g√©n√©r√© automatiquement
      duration: 5000,               // 5 secondes par d√©faut
      autoClose: true,              // Fermeture automatique par d√©faut
      ...notification               // √âcrase les valeurs par d√©faut avec les param√®tres fournis
    };

    // AJOUT √Ä LA LISTE DES NOTIFICATIONS ACTIVES
    const currentNotifications = this.notificationsSubject.value;
    this.notificationsSubject.next([...currentNotifications, fullNotification]);

    // LOG DE DEBUG : Confirmation de l'ajout
    console.log(`üîî Notification ${fullNotification.type} ajout√©e:`, fullNotification.title);

    // GESTION DE LA FERMETURE AUTOMATIQUE
    if (fullNotification.autoClose && fullNotification.duration) {
      // setTimeout retarde l'ex√©cution de remove() de X millisecondes
      setTimeout(() => {
        this.remove(id);
      }, fullNotification.duration);
    }

    // RETOURNE L'ID pour permettre la suppression manuelle si besoin
    return id;
  }

  /**
   * M√âTHODES DE RACCOURCI - TYPES SP√âCIFIQUES
   * Simplification des appels pour les types courants de notifications
   */

  /**
   * NOTIFICATION DE SUCC√àS (verte)
   * Usage typique : confirmation d'ajout au panier, sauvegarde r√©ussie
   */
  success(title: string, message: string, duration?: number): string {
    return this.show({
      type: 'success',
      title,
      message,
      duration
    });
  }

  /**
   * NOTIFICATION D'ERREUR (rouge)
   * Usage typique : erreurs API, validation √©chou√©e
   */
  error(title: string, message: string, duration?: number): string {
    return this.show({
      type: 'error',
      title,
      message,
      duration: duration || 8000,  // Erreurs affich√©es plus longtemps
      autoClose: duration !== 0    // Si duration = 0, pas de fermeture auto
    });
  }

  /**
   * NOTIFICATION D'AVERTISSEMENT (orange)
   * Usage typique : stock faible, action requise
   */
  warning(title: string, message: string, duration?: number): string {
    return this.show({
      type: 'warning',
      title,
      message,
      duration
    });
  }

  /**
   * NOTIFICATION D'INFORMATION (bleue)
   * Usage typique : conseils, informations g√©n√©rales
   */
  info(title: string, message: string, duration?: number): string {
    return this.show({
      type: 'info',
      title,
      message,
      duration
    });
  }

  // =================================
  // M√âTHODES DE GESTION - SUPPRESSION
  // =================================

  /**
   * SUPPRIMER UNE NOTIFICATION SP√âCIFIQUE
   * @param id - ID de la notification √† supprimer
   * 
   * USAGE : Clic sur bouton "X" ou fermeture automatique
   */
  remove(id: string): void {
    const currentNotifications = this.notificationsSubject.value;
    
    // FILTRAGE : Garde toutes les notifications SAUF celle avec l'ID fourni
    const updatedNotifications = currentNotifications.filter(n => n.id !== id);
    
    // MISE √Ä JOUR DE LA LISTE
    this.notificationsSubject.next(updatedNotifications);
    
    // LOG DE DEBUG
    console.log(`üîî Notification ${id} supprim√©e`);
  }

  /**
   * VIDER TOUTES LES NOTIFICATIONS
   * Usage : Reset de l'interface, nettoyage g√©n√©ral
   */
  clear(): void {
    this.notificationsSubject.next([]);
    console.log('üîî Toutes les notifications supprim√©es');
  }

  /**
   * COMPTER LES NOTIFICATIONS ACTIVES
   * Usage : Affichage du nombre dans l'interface
   */
  getCount(): number {
    return this.notificationsSubject.value.length;
  }

  // =================================
  // M√âTHODES SP√âCIALIS√âES - AJOUT PANIER
  // =================================

  /**
   * NOTIFICATION SP√âCIFIQUE POUR AJOUT AU PANIER
   * M√©thode d√©di√©e avec format standardis√© et action "Voir le panier"
   * 
   * @param productName - Nom du produit ajout√©
   * @param quantity - Quantit√© ajout√©e (optionnel, d√©faut = 1)
   * @param onViewCart - Callback pour "Voir le panier" (optionnel)
   */
  showCartAddSuccess(
    productName: string, 
    quantity: number = 1,
    onViewCart?: () => void
  ): string {
    // FORMAT DU MESSAGE SELON LA QUANTIT√â
    const quantityText = quantity > 1 ? `${quantity} x ` : '';
    const pluriel = quantity > 1 ? 's' : '';
    
    return this.show({
      type: 'success',
      title: 'üõí Produit ajout√© au panier',
      message: `${quantityText}${productName} ajout√©${pluriel} avec succ√®s`,
      duration: 4000,                // Dur√©e optimale pour lire le message
      action: onViewCart ? {         // Bouton optionnel "Voir le panier"
        label: 'Voir le panier',
        callback: onViewCart
      } : undefined
    });
  }

  /**
   * NOTIFICATION D'ERREUR POUR AJOUT AU PANIER
   * Format standardis√© pour les erreurs de panier (rupture stock, etc.)
   */
  showCartAddError(productName: string, reason: string): string {
    return this.error(
      '‚ùå Impossible d\'ajouter au panier',
      `${productName}: ${reason}`
    );
  }
}
